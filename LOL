Структура базы данных:
1. Таблица Clients (Клиенты):
ClientID INT PRIMARY KEY IDENTITY(1,1) -- ID клиента (автоинкремент)
LastName VARCHAR(255) NOT NULL -- Фамилия
FirstName VARCHAR(255) NOT NULL -- Имя
MiddleName VARCHAR(255) -- Отчество (необязательно)
Phone VARCHAR(20) NOT NULL -- Телефон
Email VARCHAR(255) -- Email (необязательно)
PromoRegistered BIT DEFAULT 0 -- Участие в промо-акции (0 - нет, 1 - да)
2. Таблица Employees (Сотрудники):
EmployeeID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID() -- Уникальный ID сотрудника (GUID)
LastName VARCHAR(255) NOT NULL -- Фамилия
FirstName VARCHAR(255) NOT NULL -- Имя
MiddleName VARCHAR(255) -- Отчество (необязательно)
BirthDate DATE -- Дата рождения
Phone VARCHAR(20) NOT NULL -- Телефон
City VARCHAR(255) NOT NULL -- Город
Street VARCHAR(255) NOT NULL -- Улица
HouseNumber VARCHAR(10) NOT NULL -- Номер дома
ApartmentNumber VARCHAR(10) -- Номер квартиры (необязательно)
3. Таблица Products (Товары/Услуги):
ProductID INT PRIMARY KEY IDENTITY(1,1) -- ID товара/услуги (автоинкремент)
ProductName VARCHAR(255) NOT NULL -- Наименование
Description VARCHAR(MAX) -- Описание
Price DECIMAL(10,2) NOT NULL -- Цена
Image VARBINARY(MAX) -- Изображение (необязательно)
4. Таблица Orders (Заказы):
OrderID INT PRIMARY KEY IDENTITY(1,1) -- ID заказа (автоинкремент)
ClientID INT NOT NULL -- ID клиента (внешний ключ)
EmployeeID UNIQUEIDENTIFIER -- ID сотрудника (внешний ключ)
OrderDate DATE NOT NULL -- Дата заказа
PaymentMethod VARCHAR(50) NOT NULL -- Способ оплаты
Status VARCHAR(50) NOT NULL -- Статус заказа ("Создан", "В работе", "Выполнен")
FOREIGN KEY (ClientID) REFERENCES Clients(ClientID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
5. Таблица OrderItems (Состав заказа):
OrderItemID INT PRIMARY KEY IDENTITY(1,1) -- ID позиции в заказе (автоинкремент)
OrderID INT NOT NULL -- ID заказа (внешний ключ)
ProductID INT NOT NULL -- ID товара/услуги (внешний ключ)
Quantity INT NOT NULL -- Количество
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
6. Таблица HistoryCost (История цен):
HistoryCostID INT PRIMARY KEY IDENTITY(1,1) -- ID записи в истории цен
ChangeDate DATETIME DEFAULT GETDATE() NOT NULL -- Дата изменения цены (по умолчанию текущее время)
ProductID INT NOT NULL -- ID товара/услуги (внешний ключ)
OldPrice DECIMAL(10,2) NOT NULL -- Старое значение цены
NewPrice DECIMAL(10,2) NOT NULL -- Новое значение цены
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
Процедура для проверки email:
CREATE PROCEDURE dbo.ValidateEmails 
AS
BEGIN
  SELECT 
    Email,
    CASE 
      WHEN Email LIKE '%[^a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+%' OR
           Email NOT LIKE '%_@_%_.__%' OR 
           Email LIKE '%.[.]%'
      THEN 0 -- Невалидный email
      ELSE 1 -- Валидный email
    END AS IsValid
  FROM Clients;
END;
GO
Use code with caution.
SQL
Триггер для записи истории цен:
CREATE TRIGGER trg_ProductPriceUpdate
ON Products
AFTER UPDATE
AS
BEGIN
  IF UPDATE(Price)
  BEGIN
    INSERT INTO HistoryCost (ProductID, OldPrice, NewPrice)
    SELECT 
      d.ProductID,
      d.Price,
      i.Price
    FROM DELETED d
    JOIN INSERTED i ON d.ProductID = i.ProductID;
  END;
END;
GO





-- Создание таблицы Clients
CREATE TABLE Clients (
    ClientID INT PRIMARY KEY IDENTITY(1,1),
    LastName VARCHAR(255) NOT NULL,
    FirstName VARCHAR(255) NOT NULL,
    MiddleName VARCHAR(255),
    Phone VARCHAR(20) NOT NULL,
    Email VARCHAR(255),
    PromoRegistered BIT DEFAULT 0
);
GO

-- Создание таблицы Employees
CREATE TABLE Employees (
    EmployeeID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    LastName VARCHAR(255) NOT NULL,
    FirstName VARCHAR(255) NOT NULL,
    MiddleName VARCHAR(255),
    BirthDate DATE,
    Phone VARCHAR(20) NOT NULL,
    City VARCHAR(255) NOT NULL,
    Street VARCHAR(255) NOT NULL,
    HouseNumber VARCHAR(10) NOT NULL,
    ApartmentNumber VARCHAR(10)
);
GO

-- Создание таблицы Products
CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY(1,1),
    ProductName VARCHAR(255) NOT NULL,
    Description VARCHAR(MAX),
    Price DECIMAL(10,2) NOT NULL,
    Image VARBINARY(MAX)
);
GO

-- Создание таблицы Orders
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    ClientID INT NOT NULL,
    EmployeeID UNIQUEIDENTIFIER,
    OrderDate DATE NOT NULL,
    PaymentMethod VARCHAR(50) NOT NULL,
    Status VARCHAR(50) NOT NULL,
    FOREIGN KEY (ClientID) REFERENCES Clients(ClientID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);
GO

-- Создание таблицы OrderItems
CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
GO

-- Создание таблицы HistoryCost
CREATE TABLE HistoryCost (
    HistoryCostID INT PRIMARY KEY IDENTITY(1,1),
    ChangeDate DATETIME DEFAULT GETDATE() NOT NULL,
    ProductID INT NOT NULL,
    OldPrice DECIMAL(10,2) NOT NULL,
    NewPrice DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
GO

-- Создание процедуры dbo.ValidateEmails
CREATE PROCEDURE dbo.ValidateEmails 
AS
BEGIN
  SELECT 
    Email,
    CASE 
      WHEN Email LIKE '%[^a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+%' OR
           Email NOT LIKE '%_@_%_.__%' OR 
           Email LIKE '%.[.]%'
      THEN 0 
      ELSE 1 
    END AS IsValid
  FROM Clients;
END;
GO

-- Создание триггера trg_ProductPriceUpdate
CREATE TRIGGER trg_ProductPriceUpdate
ON Products
AFTER UPDATE
AS
BEGIN
  IF UPDATE(Price)
  BEGIN
    INSERT INTO HistoryCost (ProductID, OldPrice, NewPrice)
    SELECT 
      d.ProductID,
      d.Price,
      i.Price
    FROM DELETED d
    JOIN INSERTED i ON d.ProductID = i.ProductID;
  END;
END;
GO
